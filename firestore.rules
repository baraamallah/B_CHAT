
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    // read: Any authenticated user can read public profile info.
    // write: Users can only create and update their own profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }
    
    // FRIEND REQUESTS
    // read: Users can only read requests sent to them or by them.
    // create: Any signed-in user can create a friend request.
    // update, delete: Only the recipient of the request can update or delete it.
    match /friendRequests/{requestId} {
      allow read: if isSignedIn() && (resource.data.to == request.auth.uid || resource.data.from == request.auth.uid);
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.to == request.auth.uid;
    }

    // CONVERSATIONS & MESSAGES
    // read, write: Only participants of a conversation can read or write messages.
    match /conversations/{conversationId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        allow read, write: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }
  }
}
