rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read any profile (client-side handles privacy)
      allow read: if isAuthenticated();
      
      // A user can only create or update their own profile
      allow write: if isOwner(userId);
    }
    
    // Rules for the 'friendRequests' collection
    match /friendRequests/{requestId} {
      // A user can read a request if they are the recipient
      allow read: if isAuthenticated() && resource.data.to == request.auth.uid;
      
      // Any authenticated user can create a friend request
      allow create: if isAuthenticated();

      // Only the recipient can update (accept) or delete (decline) a request
      allow update, delete: if isAuthenticated() && resource.data.to == request.auth.uid;
    }

    // Rules for the 'conversations' collection and its subcollections
    match /conversations/{conversationId} {
      // A user can access a conversation document if they are a participant
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participants;

      // A user can create a conversation if they are one of the participants
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      // Rules for the 'messages' subcollection
      match /messages/{messageId} {
        // A user can read messages in a conversation they are part of
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        
        // A user can create (send) a message in a conversation they are part of
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]) && request.resource.data.senderId == request.auth.uid;

        // A user can only update (delete) their own message
        allow update: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      }
    }
  }
}
